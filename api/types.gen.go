// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"
)

// Defines values for EnrichmentMetaSource.
const (
	Openlibrary EnrichmentMetaSource = "openlibrary"
)

// Defines values for EnrichmentMetaStatus.
const (
	NotRequested EnrichmentMetaStatus = "not_requested"
	Ok           EnrichmentMetaStatus = "ok"
	Partial      EnrichmentMetaStatus = "partial"
)

// Defines values for ErrorResponseErrorCode.
const (
	CONFLICT   ErrorResponseErrorCode = "CONFLICT"
	NOTFOUND   ErrorResponseErrorCode = "NOT_FOUND"
	UPSTREAM   ErrorResponseErrorCode = "UPSTREAM"
	VALIDATION ErrorResponseErrorCode = "VALIDATION"
)

// AuthorSummary defines model for AuthorSummary.
type AuthorSummary struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// BookCreate defines model for BookCreate.
type BookCreate struct {
	// Authors Names of authors; if enrichment is used, will be merged case-insensitively.
	Authors  *[]string `json:"authors,omitempty"`
	CoverUrl *string   `json:"cover_url,omitempty"`

	// Isbn ISBN-10 or ISBN-13 (digits and dashes allowed).
	Isbn          *string   `json:"isbn,omitempty"`
	PageCount     *int      `json:"page_count,omitempty"`
	PublishedYear *int      `json:"published_year,omitempty"`
	Subtitle      *string   `json:"subtitle,omitempty"`
	Tags          *[]string `json:"tags,omitempty"`
	Title         string    `json:"title"`
}

// BookFull defines model for BookFull.
type BookFull struct {
	Authors       []AuthorSummary `json:"authors"`
	CoverUrl      *string         `json:"cover_url"`
	CreatedAt     time.Time       `json:"created_at"`
	Enrichment    *EnrichmentMeta `json:"enrichment,omitempty"`
	Id            string          `json:"id"`
	Isbn          *string         `json:"isbn"`
	PageCount     *int            `json:"page_count"`
	PublishedYear *int            `json:"published_year"`
	Subtitle      *string         `json:"subtitle"`
	Tags          *[]string       `json:"tags,omitempty"`
	Title         string          `json:"title"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

// EnrichmentMeta defines model for EnrichmentMeta.
type EnrichmentMeta struct {
	Attempted    bool                  `json:"attempted"`
	LookedUpIsbn *string               `json:"looked_up_isbn"`
	Source       *EnrichmentMetaSource `json:"source"`
	Status       EnrichmentMetaStatus  `json:"status"`
}

// EnrichmentMetaSource defines model for EnrichmentMeta.Source.
type EnrichmentMetaSource string

// EnrichmentMetaStatus defines model for EnrichmentMeta.Status.
type EnrichmentMetaStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Code    ErrorResponseErrorCode  `json:"code"`
		Details *map[string]interface{} `json:"details,omitempty"`
		Message string                  `json:"message"`
	} `json:"error"`
}

// ErrorResponseErrorCode defines model for ErrorResponse.Error.Code.
type ErrorResponseErrorCode string

// PaginatedBooks defines model for PaginatedBooks.
type PaginatedBooks struct {
	Data     []BookFull `json:"data"`
	Page     int        `json:"page"`
	PageSize int        `json:"page_size"`
	Total    int        `json:"total"`
}

// AuthorName defines model for AuthorName.
type AuthorName = string

// BookId defines model for BookId.
type BookId = string

// Enrich defines model for Enrich.
type Enrich = bool

// Q defines model for Q.
type Q = string

// RequireEnrichment defines model for RequireEnrichment.
type RequireEnrichment = bool

// Year defines model for Year.
type Year = int

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// Conflict defines model for Conflict.
type Conflict = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// UpstreamFailed defines model for UpstreamFailed.
type UpstreamFailed = ErrorResponse

// ListBooksParams defines parameters for ListBooks.
type ListBooksParams struct {
	// Q Free-text search over title/subtitle.
	Q *Q `form:"q,omitempty" json:"q,omitempty"`

	// Author Filter by author name (contains, case-insensitive).
	Author *AuthorName `form:"author,omitempty" json:"author,omitempty"`

	// Year Filter by exact published year.
	Year *Year `form:"year,omitempty" json:"year,omitempty"`
}

// CreateBookParams defines parameters for CreateBook.
type CreateBookParams struct {
	// Enrich If true and an ISBN is provided, attempt external enrichment.
	Enrich *Enrich `form:"enrich,omitempty" json:"enrich,omitempty"`

	// RequireEnrichment If true, fail when enrichment is unavailable or fails.
	RequireEnrichment *RequireEnrichment `form:"require_enrichment,omitempty" json:"require_enrichment,omitempty"`
}

// CreateBookJSONRequestBody defines body for CreateBook for application/json ContentType.
type CreateBookJSONRequestBody = BookCreate
